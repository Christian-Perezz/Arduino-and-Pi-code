/* Christian Perez
EE3420 Dr. Stapltons modified shell code for traffic light simulator
*/

/* include #define DEBUG to allow for debugging tools and messages
 * comment this out to stop debug messaging
*/
#define DEBUG
/* the ee3420_pi.h header includes a lot of setup/shutdown functionality */
/* the header was written for this class and should be included in every lab 
program */
#include "ee3420_pi.h"
/* the ee3420_pi_aux_board.h header includes definitions for the auxiliary PCB. */
/* the header should be included */
#include "ee3420_pi_aux_board.h"

//global variables
char host_receive_buffer[81];
int host_receive_buffer_pointer=0;
char host_received_char;
int host_received_instruction_complete=0;
char host_buffer[81];
char temp_string[140];
char current_key;
char command_string[100];
char command_parameters[max_parameter_limit][max_parameter_length];    
char keys_received[3]={0,0,0};
int loop_active;
int override = 0;
//end of variables specifically for this program
 
 int system_state=1;
 
 void all_leds_off(void)
 {
    gpioWrite(LED_GREEN,0);
    gpioWrite(LED_YELLOW,0);  
    gpioWrite(LED_RED,0);
    gpioWrite(LED_BLUE,0);
    gpioWrite(LED_WHITE,0);
    
        sprintf(command_string,"LED:RED:0\n");  
    serial_send_request(serial_handle, command_string, serial_receive_buffer);
    process_serial_response(serial_receive_buffer);

        sprintf(command_string,"LED:YELLOW:0\n");  
    serial_send_request(serial_handle, command_string, serial_receive_buffer);
    process_serial_response(serial_receive_buffer);
    
        sprintf(command_string,"LED:RED:0\n");  
    serial_send_request(serial_handle, command_string, serial_receive_buffer);
    process_serial_response(serial_receive_buffer);

        sprintf(command_string,"LED:BLUE:0\n");  
    serial_send_request(serial_handle, command_string, serial_receive_buffer);
    process_serial_response(serial_receive_buffer);

        sprintf(command_string,"LED:WHITE:0\n");  
    serial_send_request(serial_handle, command_string, serial_receive_buffer);
    process_serial_response(serial_receive_buffer);

 }

 void interrupt()
{
    override = 1;
}

void checkForKeypress() 
{
        //request a key from the 4x4 keypad on the Mega
        sprintf(command_string,"KEYPAD:?\n");
        serial_send_request(serial_handle, command_string, serial_receive_buffer);
        process_serial_response(serial_receive_buffer);
        if(serial_device.last_error_code < 0)
        {
            display_serial_device_error(serial_device.last_error_code);
        }	
        //read key returned or "NONE" message
        if(!strcmp(&serial_command_parameters[1][0],"NONE"))
        {
            current_key=0;
        }
        else
        {
            //If response is not "NONE" assume key received
            //move last two keystrokes back in buffer
            keys_received[2]=keys_received[1]; 
            keys_received[1]=keys_received[0];
            keys_received[0]=serial_command_parameters[1][0]; //current key
            current_key = serial_command_parameters[1][0];
            
        }
        
        switch(current_key)
        {
            case '1':
            {
                break;
            }  //end of case '1'
            case '2':
            {
            
                break;
            }	//end of case '2'
            case '3':
            {
    
                break;
            }  //end of case '3'
            case '4':
            {
                
                    
                break;
            }  //end of case '4'
            case '*':
            case 'e':
            case 'E':  //on 4x4 keypad key may be labeled *, e, or E
            {
                //printf("* - Press '*' three times in sequence to end program\n");
                if(	(keys_received[0] == keys_received[1]) && (keys_received[0] == keys_received[2]) )
                {
                    //3 '*' in sequence ends program
                    loop_active = LOGIC_FALSE;
                    printf("Three \'*\' in a row pressed, ending program.\n");
                }

                break;
            }  //end of case '*'
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':
            case 'a':
            case 'A':
            case 'b':
            case 'B':
            case 'c':
            case 'C':
            case 'd':
            case 'D':
            case 'f':
            case 'F':
            case '#':
            {
                break;
            }
            
            default:
            {
                //display_menu();
                break;	
            }
        }  //end of switch(keys_received[0])
}
// end of function declarations

int loop_active;

// start of main function exe
int main()
{
        //The ee3420_startup() function from ee3420_pi.h should be the first function called
    //in any program
    if(ee3420_startup() <0)
    { return(ee3420_shutdown()); }	//if unable to intialize completely, end the program
    //end of block to start any program
    loop_active = 1;
    ee3420_pi_aux_board_setup();
    
    gpioSetAlertFunc(BUTTON_RIGHT, interrupt);
    

// function body    
while(loop_active)
{
    all_leds_off();
    checkForKeypress();

switch (system_state)
{
    case 1:
    {
        if(override == 1)
        {
            system_state = 9;
            break;
        }
        else
        {
            gpioWrite(LED_RED, 1); //write to pi LED 

            sprintf(command_string,"LED:RED:1\n");  
            serial_send_request(serial_handle, command_string, serial_receive_buffer);
            process_serial_response(serial_receive_buffer); //write to arduino LED
            if(serial_device.last_error_code < 0)
            {
            display_serial_device_error(serial_device.last_error_code); //error checking
            }

            gpioSleep(0,3,0);
            system_state = 2;
            break;
    
        }
    }
    case 2:
    {
        if(override == 1)
        {
            system_state = 7;
            break; //override state
        }
        else
        {       
            gpioWrite(LED_RED, 1);

            sprintf(command_string,"LED:GREEN:1\n");  
            serial_send_request(serial_handle, command_string, serial_receive_buffer);
            process_serial_response(serial_receive_buffer);
            if(serial_device.last_error_code < 0)
            {
            display_serial_device_error(serial_device.last_error_code);
            }

            gpioSleep(0,3,0);
            system_state = 3;
            break;
            //executables red, green
        }
    }
    case 3:
    {
        if(override == 1)
        {
            system_state = 9;
            break;
        }
        else
        {
            gpioWrite(LED_RED, 1);

            sprintf(command_string,"LED:YELLOW:1\n");  
            serial_send_request(serial_handle, command_string, serial_receive_buffer);
            process_serial_response(serial_receive_buffer);
            if(serial_device.last_error_code < 0)
            {
            display_serial_device_error(serial_device.last_error_code);
            }

            gpioSleep(0,3,0);
            system_state = 4;
            break;
            // add executables red, yellow
        }
    }
    case 4:
    {
        if(override == 1)
        {
            system_state = 9;
            break;
        }
        else
        {
            gpioWrite(LED_RED, 1);

            sprintf(command_string,"LED:RED:0\n");  
            serial_send_request(serial_handle, command_string, serial_receive_buffer);
            process_serial_response(serial_receive_buffer);
            if(serial_device.last_error_code < 0)
            {
            display_serial_device_error(serial_device.last_error_code);
            }

            gpioSleep(0,3,0);
            system_state = 5;
            break;
            // add executables red, red
        }
    }
    case 5:
    {
        if(override == 1)
        {
            system_state = 8;
            break;
        }
        else
        {
            gpioWrite(LED_GREEN, 1);

            sprintf(command_string,"LED:RED:1\n");  
            serial_send_request(serial_handle, command_string, serial_receive_buffer);
            process_serial_response(serial_receive_buffer);
            if(serial_device.last_error_code < 0)
            {
            display_serial_device_error(serial_device.last_error_code);
            }

            gpioSleep(0,3,0);
            system_state = 6;
            break;
            // add executables green, red
        }
    }
    case 6:
    {
        if(override == 1)
        {
            system_state = 9;
            break;
        }
        else
        {
            gpioWrite(LED_YELLOW, 1);

            sprintf(command_string,"LED:RED:1\n");  
            serial_send_request(serial_handle, command_string, serial_receive_buffer);
            process_serial_response(serial_receive_buffer);
            if(serial_device.last_error_code < 0)
            {
            display_serial_device_error(serial_device.last_error_code);
            }

            gpioSleep(0,3,0);
            system_state = 1;
            break;
            // add executables yellow, red
        }
    }
    case 7:
    {
        if(override == 1)
        {
            system_state = 9;
            break;
        }
        else
        {
            gpioWrite(LED_RED, 1);

            sprintf(command_string,"LED:YELLOW:1\n");  
            serial_send_request(serial_handle, command_string, serial_receive_buffer);
            process_serial_response(serial_receive_buffer);
            if(serial_device.last_error_code < 0)
            {
            display_serial_device_error(serial_device.last_error_code);
            }

            gpioSleep(0,3,0);
            system_state = 9;
            break;
            // add executables red, yellow
        }
    }
    case 8:
    {
        if(override == 1)
        {
            system_state = 9;
            break;
        }
        else
        {
            gpioWrite(LED_YELLOW, 1);
            
            sprintf(command_string,"LED:RED:1\n");  
            serial_send_request(serial_handle, command_string, serial_receive_buffer);
            process_serial_response(serial_receive_buffer);
            if(serial_device.last_error_code < 0)
            {
            display_serial_device_error(serial_device.last_error_code);
            }

            gpioSleep(0,3,0);
            system_state = 9;
            break;
            // add executables yellow, red
        }
    }
    case 9:
    {
        if(override == 1)
        {
            sprintf(command_string,"BUZZER:1\n");  
            serial_send_request(serial_handle, command_string, serial_receive_buffer);
            process_serial_response(serial_receive_buffer); //call to arduino buzzer
            if(serial_device.last_error_code < 0)
            {
            display_serial_device_error(serial_device.last_error_code);
            }

            gpioSleep(0,0.5,0);

            sprintf(command_string,"BUZZER:0\n");  
            serial_send_request(serial_handle, command_string, serial_receive_buffer);
            process_serial_response(serial_receive_buffer);
            if(serial_device.last_error_code < 0)
            {
            display_serial_device_error(serial_device.last_error_code);
            }

            gpioWrite(LED_RED, 1);

            sprintf(command_string,"LED:RED:1\n");  
            serial_send_request(serial_handle, command_string, serial_receive_buffer);
            process_serial_response(serial_receive_buffer);
            if(serial_device.last_error_code < 0)
            {
            display_serial_device_error(serial_device.last_error_code);
            }

            gpioWrite(LED_BLUE, 1);

            sprintf(command_string,"LED:BLUE:1\n");  
            serial_send_request(serial_handle, command_string, serial_receive_buffer);
            process_serial_response(serial_receive_buffer);
            if(serial_device.last_error_code < 0)
            {
            display_serial_device_error(serial_device.last_error_code);
            }

            gpioSleep(0,3,0);

            override = 0;

            system_state = 1;

            break;
        }

        else
        {
            override = 0;

            system_state = 1;
            break;
            //executables red, red, blue, blue
        }
    }

} //switch  
} //while loop  
} //main
