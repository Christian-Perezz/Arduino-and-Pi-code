/* Christian Perez
EE3420 Dr. Stapltons modified shell code for stepper motor control
*/

/* include #define DEBUG to allow for debugging tools and messages
 * comment this out to stop debug messaging
*/
#define DEBUG

const int pw1 = 24,
		  pw2 = 25,
          m1 = 9,
          m2 = 11,
          sm1 = 5;
     
#include "ee3420_pi.h"
/* the ee3420_pi_aux_board.h header includes definitions for the auxiliary PCB. */
/* the header should be included */
#include "ee3420_pi_aux_board.h"

//global variables
char host_receive_buffer[81];
int host_receive_buffer_pointer=0;
char host_received_char;
int host_received_instruction_complete=0;
char host_buffer[81];
char temp_string[140];
char current_key;
char command_string[100];
char command_parameters[max_parameter_limit][max_parameter_length];    
char keys_received[3]={0,0,0};
int loop_active;
int override = 0;
 
char lcdText[100];

int dutyCycle = 0,
	dutyCycle1 = 0,
    direction = 0,
    servo_pw = 0;

void dc_motor_direction()
{
    if(dutyCycle < 0)
    {
        direction = 2;
        dutyCycle1 = (dutyCycle * (-1));
        gpioPWM(pw2, dutyCycle1);
        gpioWrite(m1, 0);
        gpioWrite(m2, 1);
        
    }
    else if(dutyCycle > 0)
    {
        direction = 1;
        gpioPWM(pw1, dutyCycle);
        gpioWrite(m2, 0);
        gpioWrite(m1, 1);
    }
    else if (dutyCycle == 0)
    {
        direction = 0;
        gpioPWM(pw1, 0);
        gpioPWM(pw2, 0);
        gpioWrite(m1, 0);
        gpioWrite(m2, 0);
    }
}

void servo()
{
    gpioServo(sm1, servo_pw);
}
 
 
 void lcdDisplayText(char text[]) //intializes character spaces for LCD
 {
    sprintf(command_string,"LCD:TEXT:%s\n", text);

    sprintf(temp_string,"Sending request ... %s",command_string);
    debug_message(DEBUG_INFO,temp_string);		
    serial_send_request(serial_handle, command_string, serial_receive_buffer);
    sprintf(temp_string,"Response ... %s",serial_receive_buffer);
    debug_message(DEBUG_INFO,temp_string);
    process_serial_response(serial_receive_buffer);
    
    if(serial_device.last_error_code < 0)
    {
        display_serial_device_error(serial_device.last_error_code);
    }
}

void lcdReset() //resets LCD information to blank
{
    sprintf(command_string,"LCD:CLEAR\n");
    sprintf(temp_string,"Sending request ... %s",command_string);
    debug_message(DEBUG_INFO,temp_string);
    serial_send_request(serial_handle, command_string, serial_receive_buffer);
    sprintf(temp_string,"Response ... %s",serial_receive_buffer);
    debug_message(DEBUG_INFO,temp_string);
    process_serial_response(serial_receive_buffer);
    
    if(serial_device.last_error_code < 0)
    {
        display_serial_device_error(serial_device.last_error_code);
    }
}

void updateLCD() //update LCD screen
{
    snprintf(lcdText, sizeof(lcdText), "D:%i SER:%i DIR%i",dutyCycle, servo_pw, direction);
    
    lcdReset();
    lcdDisplayText(lcdText);
}

void checkForKeypress() 
{
        //request a key from the 4x4 keypad on the Mega
        sprintf(command_string,"KEYPAD:?\n");
        serial_send_request(serial_handle, command_string, serial_receive_buffer);
        process_serial_response(serial_receive_buffer);
        if(serial_device.last_error_code < 0)
        {
            display_serial_device_error(serial_device.last_error_code);
        }	
        //read key returned or "NONE" message
        if(!strcmp(&serial_command_parameters[1][0],"NONE"))
        {
            current_key=0;
        }
        else
        {
            //If response is not "NONE" assume key received
            //move last two keystrokes back in buffer
            keys_received[2]=keys_received[1]; 
            keys_received[1]=keys_received[0];
            keys_received[0]=serial_command_parameters[1][0]; //current key
            current_key = serial_command_parameters[1][0];
            
        }
        
        switch(current_key)
        {
            case '0':
            {
                dutyCycle = 0;
                servo_pw = 0;
                break;
            }
            case '1':
            {
                servo_pw += 1;
                break;
            }
            case '2':
            {
                servo_pw += 10;
                break;
            }
            case '3':
            {
                servo_pw += 100;
                break;
            }
            case '4':
            {
                servo_pw -= 1;
                break;
            }
            case '*':
            case 'e':
            case 'E':  //on 4x4 keypad key may be labeled *, e, or E
            {
                //printf("* - Press '*' three times in sequence to end program\n");
                if(	(keys_received[0] == keys_received[1]) && (keys_received[0] == keys_received[2]) )
                {
                    //3 '*' in sequence ends program
                    loop_active = 0;
                    printf("Three \'*\' in a row pressed, ending program.\n");
                }

                break;
            }  //end of case '*'
            case '5':
            {
                servo_pw -= 10;
                break;
            }
            case '6':
            {
                servo_pw -= 100;
            }
            case '7':
            {
                servo_pw = 500;
                break;
            }
            case '8':
            {
                servo_pw = 1500;
                break;
            }
            case '9':
            {
                servo_pw = 2500;
                break;
            }
            case 'a':
            case 'A':
            {
                dutyCycle += 1;
                break;
            }
            case 'b':
            case 'B':
            {
                dutyCycle -= 1;
                break;
            }
            case 'c':
            case 'C':
            {
                dutyCycle += 10;
                break;
            }
            case 'd':
            case 'D':
            {
                dutyCycle -= 10;
                break;
            }
            case 'f':
            case 'F':
            case '#':
            default:
            {
                break;	
            }
        }  //end of switch(keys_received[0])
}
// end of function declarations

int main()
{
        
    if(ee3420_startup() < 0)
    {
        return(ee3420_shutdown()); //startup error checking 
    }
    
    ee3420_pi_aux_board_setup();
    
	loop_active = 1;

    gpioSetPWMrange(m1, 100); //sets range of duty cycle up to (-100)-100
    gpioSetPWMrange(m2, 100);

    while(loop_active)
    {
        checkForKeypress();
        dc_motor_direction();
        servo();
        updateLCD();
    }

 lcdReset(); // reset lcd and stepper motor and LEDs
	
 return(ee3420_shutdown());	//shutdown call routine
}
