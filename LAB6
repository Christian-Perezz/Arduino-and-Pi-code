/* Christian Perez
EE3420 Dr. Stapltons modified shell code for stepper motor control
*/

/* include #define DEBUG to allow for debugging tools and messages
 * comment this out to stop debug messaging
*/
#define DEBUG

const int spkr1 = 12,
          spkr2 = 13;
          
#include "ee3420_pi.h"
/* the ee3420_pi_aux_board.h header includes definitions for the auxiliary PCB. */
/* the header should be included */
#include "ee3420_pi_aux_board.h"
#include "spi_74hc595.h"

//global variables
char host_receive_buffer[81];
int host_receive_buffer_pointer=0;
char host_received_char;
int host_received_instruction_complete=0;
char host_buffer[81];
char temp_string[140];
char current_key;
char command_string[100];
char command_parameters[max_parameter_limit][max_parameter_length];    
char keys_received[3]={0,0,0};
int loop_active;
int override = 0;

int flag; //SPI handlers
int handle_74HC595;
 
char lcdText[100];

int arrled[8][8];

float joystick_center = 512,
      joystickX = 0,
      joystickY = 0,
      rangeX = 0,
      rangeY = 0,
      temperature = 0,
      sample1 = 0;

int voltage = 0,
    row1,
    column1,
    rangeXi,
    rangeYi;



int max_led_initialize(int spi_port, int ce_select, int rclk_pin)
{
	int flag1;
	unsigned int max_flags;
	max = rclk_pin; 
	
	if((spi_port < 0) || (spi_port > 1))
	{
		printf("spi_port must be either 0 or 1.  0 is primary SPI. 1 is auxillary SPI.\n");
		return(-1);
	}
	
	if(spi_port == 0)
	{
		if((ce_select < 0)||(ce_select > 1))
		{
			printf("For primary SPI, ce_select must be 0 or 1\n");
			return(-1);
		}
	}
	if(spi_port == 1)
	{
		if((ce_select < 0)||(ce_select > 2))
		{
			printf("For auxillary SPI, ce_select must be 0, 1, or 2\n");
			return(-1);
		}
	}

    spi_74hc595_flags=0;
	
	if (spi_port == 1)
	{	spi_74hc595_flags = spi_74hc595_flags & BIT(8); } //bit 8 (A) selects the SPI unit
	
	//no other bits need to be set in flags for the 74HC595 
	
	spi_74hc595_handle=spiOpen(ce_select, 1000000, spi_74hc595_flags);
	if(spi_74hc595_handle < 0)
	{
		printf("Unable to open SPI.  Error code %i\n",	spi_74hc595_handle);
		return(spi_74hc595_handle);
	}
	
	flag=gpioSetMode(spi_74hc595_rclk,PI_OUTPUT);
	if(flag != 0)
	{
		printf("Unable to initialize pin %i, error code %i\n",spi_74hc595_rclk,flag);
		return(-3);			
	}
	gpioWrite(spi_74hc595_rclk,0);
	
	return(spi_74hc595_handle);
	
}  //end of spi_74hc595_initialize(int spi_port, int ce_select, int rclk_pin)

int spi_max_write(int handle, uint8_t data)
{
	int flag
	char buf[1];
	buf[0]=data;
	if((flag=spiXfer(handle, buf, buf, 1)) <0) 
	{
		printf("Unable to access SPI handle %i, error code %i.\n",handle,flag);
		return(-1);
	}
	gpioWrite(spi_74hc595_rclk,1);
	gpioDelay(10);
	gpioWrite(spi_74hc595_rclk,0);	
	return(0);
	
}

void max_led_arr()
{
    rangeXi = atoi(rangeX);
    rangeYi = atoi(rangeY);

    for(int i = 0, i < 9, i++)
    {
        arrled[i][] = rangeX;
        spi_max_write(handle_74HC595, arrled[i][j]);

        for(int j = 0, j < 9, j++)
        {
            arrled[][j] = rangeY;
            spi_max_write(handle_74HC595, arrled[i][j];
        }
        gpioDelay(500000);
    }
}


void seg7led()
{
    spi_74hc595_write(handle_74HC595, voltage);
	gpioDelay(500000);
}

void joystick()
{    
    sprintf(command_string,"ADC:4:?\n");
    serial_send_request(serial_handle, command_string, serial_receive_buffer);
    process_serial_response(serial_receive_buffer);
    
    joystickX = atoi(&serial_command_parameters[2][0]); 
   
    sprintf(command_string,"ADC:5:?\n");
    serial_send_request(serial_handle, command_string, serial_receive_buffer);
    process_serial_response(serial_receive_buffer);


    joystickY = atoi(&serial_command_parameters[2][0]); 
    
    if(joystickX < 512)
    {
        rangeX = ((joystickX - 512) / 128); 
    }
    if(joystickX > 512)
    {
        rangeX = ((joystickX - 512) / 128);
    }
    if(joystickY < 512)
    {
        rangeY = ((joystickX - 512) / 128);
    }
    if(joystickY > 512)
    {
        rangeY = ((joystickX - 512) / 128);
    }
}

void potentiometer()
{
    sprintf(command_string,"ADC:2:?\n");

    serial_send_request(serial_handle, command_string, serial_receive_buffer);
    process_serial_response(serial_receive_buffer);

    sample1 = atoi(serial_command_parameters[2][0]);
    voltage = (sample1 / 16);  
}

void lcdDisplayText(char text[]) //intializes character spaces for LCD
{
    sprintf(command_string,"LCD:TEXT:%s\n", text);

    sprintf(temp_string,"Sending request ... %s",command_string);
    debug_message(DEBUG_INFO,temp_string);		
    serial_send_request(serial_handle, command_string, serial_receive_buffer);
    sprintf(temp_string,"Response ... %s",serial_receive_buffer);
    debug_message(DEBUG_INFO,temp_string);
    process_serial_response(serial_receive_buffer);
    
    if(serial_device.last_error_code < 0)
    {
        display_serial_device_error(serial_device.last_error_code);
    }
}

void lcdReset() //resets LCD information to blank
{
    sprintf(command_string,"LCD:CLEAR\n");
    sprintf(temp_string,"Sending request ... %s",command_string);
    debug_message(DEBUG_INFO,temp_string);
    serial_send_request(serial_handle, command_string, serial_receive_buffer);
    sprintf(temp_string,"Response ... %s",serial_receive_buffer);
    debug_message(DEBUG_INFO,temp_string);
    process_serial_response(serial_receive_buffer);
    
    if(serial_device.last_error_code < 0)
    {
        display_serial_device_error(serial_device.last_error_code);
    }
}

void updateLCD() //update LCD screen
{
    snprintf(lcdText, sizeof(lcdText), "X:%4.2f Y:%4.2f" ,rangeX, rangeY);
    lcdReset();
    lcdDisplayText(lcdText);
}

void checkForKeypress() //listens for keypad press
{
        //request a key from the 4x4 keypad on the Mega
        sprintf(command_string,"KEYPAD:?\n");
        serial_send_request(serial_handle, command_string, serial_receive_buffer);
        process_serial_response(serial_receive_buffer);
        if(serial_device.last_error_code < 0)
        {
            display_serial_device_error(serial_device.last_error_code);
        }	
        //read key returned or "NONE" message
        if(!strcmp(&serial_command_parameters[1][0],"NONE"))
        {
            current_key=0;
        }
        else
        {
            //If response is not "NONE" assume key received
            //move last two keystrokes back in buffer
            keys_received[2]=keys_received[1]; 
            keys_received[1]=keys_received[0];
            keys_received[0]=serial_command_parameters[1][0]; //current key
            current_key = serial_command_parameters[1][0];    
        }
        
        switch(current_key)
        {
            case '1':
            {
                break;
            }  //end of case '1'
            case '2':
            {
                break;
            }	//end of case '2'
            case '3':
            {
                break;
            }  //end of case '3'
            case '4':
            {                  
                break;
            }  //end of case '4'

            case '*':
            case 'e':
            case 'E':  //on 4x4 keypad key may be labeled *, e, or E
            {
                //printf("* - Press '*' three times in sequence to end program\n");
                if(	(keys_received[0] == keys_received[1]) && (keys_received[0] == keys_received[2]) )
                {
                    //3 '*' in sequence ends program
                    loop_active = 0;
                    printf("Three \'*\' in a row pressed, ending program.\n");
                }

                break;
            }  //end of case '*'
            case '5':
            {
                
            }
            
            case '6':
            case '7':
            case '8':
            case '9':
            case 'a':
            case 'A':
            case 'b':
            case 'B':
            case 'c':
            case 'C':
            case 'd':
            case 'D':
            case 'f':
            case 'F':
            case '#':
            {
                break;
            }
            
            default:
            {
                //display_menu();
                break;	
            }
        }  //end of switch(keys_received[0])
}

void spi_initialize()
{
    flag=gpioInitialise();   //initialize GPIO interface from pigpio library
    if(flag !=0)
    {
        printf("Unable to initialize GPIO, error code %i\n",flag);
        return(-1);
    }

    flag = handle_74HC595 = spi_74hc595_initialize(0,1,11); 
    if(flag < 0)
    {
        printf("Unable to initialize spi_74hc595, error code %i\n",flag);
        return(-2);
    } 

    flag = handle_74HC595 = max_led_initialize(0,1,11); //handle name is shared for both displays
    if(flag < 0)
    {
        printf("Unable to initialize spi_74hc595, error code %i\n",flag);
        return(-2);
    }
}

int main()
{       
    spi_initialize(); 

    if(ee3420_startup() < 0)
    {
        return(ee3420_shutdown()); //startup error checking 
    }
    
    ee3420_pi_aux_board_setup();
	loop_active = 1;

    while(loop_active)
    {
        updateLCD();
        checkForKeypress();
        potentiometer();
        joystick();
        seg7led();
        max_led();
    }

 lcdReset(); // reset lcd and stepper motor and LEDs
 int spiClose(handle_74HC595);
	
 return(ee3420_shutdown());	//shutdown call routine
}
