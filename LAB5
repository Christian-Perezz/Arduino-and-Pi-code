/* Christian Perez
EE3420 Dr. Stapltons modified shell code for stepper motor control
*/

/* include #define DEBUG to allow for debugging tools and messages
 * comment this out to stop debug messaging
*/
#define DEBUG

const int spkr1 = 12,
          spkr2 = 13;
          
#include "ee3420_pi.h"
/* the ee3420_pi_aux_board.h header includes definitions for the auxiliary PCB. */
/* the header should be included */
#include "ee3420_pi_aux_board.h"

//global variables
char host_receive_buffer[81];
int host_receive_buffer_pointer=0;
char host_received_char;
int host_received_instruction_complete=0;
char host_buffer[81];
char temp_string[140];
char current_key;
char command_string[100];
char command_parameters[max_parameter_limit][max_parameter_length];    
char keys_received[3]={0,0,0};
int loop_active;
int override = 0;
 
char lcdText[100];
int joystick_center = 512,
    joystickX = 0,
    joystickY = 0,
    range = 0;

const int dc = 500000;

void joystick()
{
    sprintf(command_string,"ADC:4:%i", (joystickY));
    serial_send_request(serial_handle, command_string, serial_receive_buffer);
    process_serial_response(serial_receive_buffer);

    sprintf(command_string,"ADC:5:%i", (joystickX));
    serial_send_request(serial_handle, command_string, serial_receive_buffer);
    process_serial_response(serial_receive_buffer);

    if(joystick_center < 510) //joystick center is 2 away form center on either side to give a deadzone
    {
        joystickX = 
    }
    if(joystickcenter > 514)
    {
        joystickX = 
    }
    if(joystickcenter < 510)
    {
        joystickY = 
    }
    if(joystickcenter > 514)
    {
        joystickY = 
    }
}

void temp()
{

}

void light()
{

}


void lcdDisplayText(char text[]) //intializes character spaces for LCD
{
    sprintf(command_string,"LCD:TEXT:%s\n", text);

    sprintf(temp_string,"Sending request ... %s",command_string);
    debug_message(DEBUG_INFO,temp_string);		
    serial_send_request(serial_handle, command_string, serial_receive_buffer);
    sprintf(temp_string,"Response ... %s",serial_receive_buffer);
    debug_message(DEBUG_INFO,temp_string);
    process_serial_response(serial_receive_buffer);
    
    if(serial_device.last_error_code < 0)
    {
        display_serial_device_error(serial_device.last_error_code);
    }
}

void lcdReset() //resets LCD information to blank
{
    sprintf(command_string,"LCD:CLEAR\n");
    sprintf(temp_string,"Sending request ... %s",command_string);
    debug_message(DEBUG_INFO,temp_string);
    serial_send_request(serial_handle, command_string, serial_receive_buffer);
    sprintf(temp_string,"Response ... %s",serial_receive_buffer);
    debug_message(DEBUG_INFO,temp_string);
    process_serial_response(serial_receive_buffer);
    
    if(serial_device.last_error_code < 0)
    {
        display_serial_device_error(serial_device.last_error_code);
    }
}

void updateLCD() //update LCD screen
{
    snprintf(lcdText, sizeof(lcdText), "X:%i Y:%i" ,joystickX, joystickY);
    lcdReset();
    lcdDisplayText(lcdText);
}

void checkForKeypress() 
{
        //request a key from the 4x4 keypad on the Mega
        sprintf(command_string,"KEYPAD:?\n");
        serial_send_request(serial_handle, command_string, serial_receive_buffer);
        process_serial_response(serial_receive_buffer);
        if(serial_device.last_error_code < 0)
        {
            display_serial_device_error(serial_device.last_error_code);
        }	
        //read key returned or "NONE" message
        if(!strcmp(&serial_command_parameters[1][0],"NONE"))
        {
            current_key=0;
        }
        else
        {
            //If response is not "NONE" assume key received
            //move last two keystrokes back in buffer
            keys_received[2]=keys_received[1]; 
            keys_received[1]=keys_received[0];
            keys_received[0]=serial_command_parameters[1][0]; //current key
            current_key = serial_command_parameters[1][0];    
        }
        
        switch(current_key)
        {
            case '1':
            {
                break;
            }  //end of case '1'
            case '2':
            {
                break;
            }	//end of case '2'
            case '3':
            {
                break;
            }  //end of case '3'
            case '4':
            {                  
                break;
            }  //end of case '4'

            case '*':
            case 'e':
            case 'E':  //on 4x4 keypad key may be labeled *, e, or E
            {
                //printf("* - Press '*' three times in sequence to end program\n");
                if(	(keys_received[0] == keys_received[1]) && (keys_received[0] == keys_received[2]) )
                {
                    //3 '*' in sequence ends program
                    loop_active = 0;
                    printf("Three \'*\' in a row pressed, ending program.\n");
                }

                break;
            }  //end of case '*'
            case '5':
            {
                
            }
            
            case '6':
            case '7':
            case '8':
            case '9':
            case 'a':
            case 'A':
            case 'b':
            case 'B':
            case 'c':
            case 'C':
            case 'd':
            case 'D':
            case 'f':
            case 'F':
            case '#':
            {
                break;
            }
            
            default:
            {
                //display_menu();
                break;	
            }
        }  //end of switch(keys_received[0])
}

int main()
{       
    if(ee3420_startup() < 0)
    {
        return(ee3420_shutdown()); //startup error checking 
    }
    
    ee3420_pi_aux_board_setup();
    
	loop_active = 1;

    while(loop_active)
    {
        updateLCD();
        checkForKeypress();
        light();
        temp();
        joystick();
    }

 lcdReset(); // reset lcd and stepper motor and LEDs
	
 return(ee3420_shutdown());	//shutdown call routine
}
