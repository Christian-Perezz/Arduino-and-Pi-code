/* Christian Perez
EE3420 Dr. Stapltons modified shell code for stepper motor control
*/

/* include #define DEBUG to allow for debugging tools and messages
 * comment this out to stop debug messaging
*/
#define DEBUG          
#include "ee3420_pi.h"
/* the ee3420_pi_aux_board.h header includes definitions for the auxiliary PCB. */
/* the header should be included */
#include "ee3420_pi_aux_board.h"
#include "spi_74hc595.h"
#include "seven_segment.h"
#include <time.h>

//global variables
char host_receive_buffer[81];
int host_receive_buffer_pointer=0;
char host_received_char;
int host_received_instruction_complete=0;
char host_buffer[81];
char temp_string[140];
char current_key;
char command_string[100];
char command_parameters[max_parameter_limit][max_parameter_length];    
char keys_received[3]={0,0,0};
int loop_active;
int override = 0;
 
char lcdText[100];
    
uint8_t data[7];
uint8_t address[8]= {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07};

struct tm *time_as_structure;

uint8_t uint8_t_to_BCD(uint8_t x)
{
	uint8_t upper,
			lower;
	upper = (x/10)%10;
	lower = x%10;
	
	return((upper*16) + lower);
}

uint8_t BCD_to_unit8(uint8_t x)
{
	uint8_t upper,
			lower;
	upper = (x/16)%10;
	lower = (x%16)%10;
	
	return((upper*10) + lower);
}

void RTC_init()
{
	char buffer[20];
    int handle;
    
	handle = i2cOpen(1, 0x68, 0); //RTC on I2C address 0x68
	buffer[0] = 0x0E;
	buffer[1] = 0;
	buffer[2] = 0x08;
	i2cWriteDevice(handle, buffer, 3);
	i2cClose(handle);
}

void RTC_read_all(char buffer[20])
{
	int handle;
	
	handle = i2cOpen(1, 0x68, 0);
	i2cWriteDevice(handle, buffer, 0);
	i2cReadDevice(handle, buffer, 20);
	i2cClose(handle);
}

void RTC_Write_time(time_t now)
{
	struct tm *now_tm;
	char buffer[20];
	now_tm = localtime(&now);
	
	buffer[0] = 0;
	buffer[1] = uint8_t_to_BCD((uint8_t)now_tm->tm_sec);
	buffer[2] = uint8_t_to_BCD((uint8_t)now_tm->tm_min);
	buffer[3] = uint8_t_to_BCD((uint8_t)now_tm->tm_hour);
	buffer[4] = uint8_t_to_BCD((uint8_t)(now_tm->tm_wday+1));
	buffer[5] = uint8_t_to_BCD((uint8_t)(now_tm->tm_mday));
	buffer[6] = uint8_t_to_BCD((uint8_t)(now_tm->tm_mon+1));
	
	if(now_tm->tm_year >= 100)
	{
		buffer[6] += BIT(7);
	}
	
	buffer[7] = uint8_t_to_BCD((uint8_t)(now_tm->tm_year % 100));
}

uint8_t RTC_Read_time()
{
	struct tm *now_tm;
	time_t now= 0;
	char buffer[20];
	now_tm = localtime(&now);
	
	RTC_read_all(buffer);
	
	now_tm->tm_sec = BCD_to_unit8(buffer[0]);
	now_tm->tm_min = BCD_to_unit8(buffer[1]);
	
	if(buffer[2] < 64)
	{
		now_tm->tm_hour = BCD_to_unit8(buffer[2]);
	}
	
	now_tm->tm_wday = BCD_to_unit8(buffer[3] - 1);
	now_tm->tm_mday = BCD_to_unit8(buffer[4]);
	now_tm->tm_mon = BCD_to_unit8(buffer[5]);
	now_tm->tm_year = BCD_to_unit8(buffer[6]);
	
	if(buffer[5] >= 128)
	{
		now_tm->tm_year += 100;
	}
	
	now = mktime(now_tm);
	return(now);
}


void lcdDisplayText(char text[]) //intializes character spaces for LCD
{
    sprintf(command_string,"LCD:TEXT:%s\n", text);

    sprintf(temp_string,"Sending request ... %s",command_string);
    debug_message(DEBUG_INFO,temp_string);		
    serial_send_request(serial_handle, command_string, serial_receive_buffer);
    sprintf(temp_string,"Response ... %s",serial_receive_buffer);
    debug_message(DEBUG_INFO,temp_string);
    process_serial_response(serial_receive_buffer);
    
    if(serial_device.last_error_code < 0)
    {
        display_serial_device_error(serial_device.last_error_code);
    }
}

void lcdReset() //resets LCD information to blank
{
    sprintf(command_string,"LCD:CLEAR\n");
    sprintf(temp_string,"Sending request ... %s",command_string);
    debug_message(DEBUG_INFO,temp_string);
    serial_send_request(serial_handle, command_string, serial_receive_buffer);
    sprintf(temp_string,"Response ... %s",serial_receive_buffer);
    debug_message(DEBUG_INFO,temp_string);
    process_serial_response(serial_receive_buffer);
    
    if(serial_device.last_error_code < 0)
    {
        display_serial_device_error(serial_device.last_error_code);
    }
}

void updateLCD() //update LCD screen
{
    snprintf(lcdText, sizeof(lcdText), "X:%4.2f Y:%4.2f" ,rangeX, rangeY);
    lcdReset();
    lcdDisplayText(lcdText);
}

void checkForKeypress() //listens for keypad press
{
        //request a key from the 4x4 keypad on the Mega
        sprintf(command_string,"KEYPAD:?\n");
        serial_send_request(serial_handle, command_string, serial_receive_buffer);
        process_serial_response(serial_receive_buffer);
        if(serial_device.last_error_code < 0)
        {
            display_serial_device_error(serial_device.last_error_code);
        }	
        //read key returned or "NONE" message
        if(!strcmp(&serial_command_parameters[1][0],"NONE"))
        {
            current_key=0;
        }
        else
        {
            //If response is not "NONE" assume key received
            //move last two keystrokes back in buffer
            keys_received[2]=keys_received[1]; 
            keys_received[1]=keys_received[0];
            keys_received[0]=serial_command_parameters[1][0]; //current key
            current_key = serial_command_parameters[1][0];    
        }
        
        switch(current_key)
        {
            case '1':
            {
                break;
            }  //end of case '1'
            case '2':
            {
                break;
            }	//end of case '2'
            case '3':
            {
                break;
            }  //end of case '3'
            case '4':
            {                  
                break;
            }  //end of case '4'

            case '*':
            case 'e':
            case 'E':  //on 4x4 keypad key may be labeled *, e, or E
            {
                //printf("* - Press '*' three times in sequence to end program\n");
                if(	(keys_received[0] == keys_received[1]) && (keys_received[0] == keys_received[2]) )
                {
                    //3 '*' in sequence ends program
                    loop_active = 0;
                    printf("Three \'*\' in a row pressed, ending program.\n");
                }

                break;
            }  //end of case '*'
            case '5':
            {
                
            }
            
            case '6':
            case '7':
            case '8':
            case '9':
            case 'a':
            case 'A':
            case 'b':
            case 'B':
            case 'c':
            case 'C':
            case 'd':
            case 'D':
            case 'f':
            case 'F':
            case '#':
            {
                break;
            }
            
            default:
            {
                //display_menu();
                break;	
            }
        }  //end of switch(keys_received[0])
}

int main()
{       
    if(ee3420_startup() < 0)
    {
        return(ee3420_shutdown()); //startup error checking 
    }
    
    RTC_init();//initilizing i2c on channl 1 address x0 and flag = 0 
    
    ee3420_pi_aux_board_setup();
	loop_active = 1;

    while(loop_active)
    {
        updateLCD();
        checkForKeypress();
    }
    
 
 lcdReset(); // reset lcd and stepper motor and LEDs
 return(ee3420_shutdown());	//shutdown call routine
}
